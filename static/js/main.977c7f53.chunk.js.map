{"version":3,"sources":["communicator.ts","redux/actions/externalActions.ts","redux/reducers/exampleReducer.ts","redux/selectors/exampleSelectors.ts","redux/store.ts","redux/actions/exampleActions.ts","utils/electronUtils.ts","components/ExampleComponent.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Communicator","store","socket","console","log","this","initSocket","socketIOClient","transports","on","dispatch","type","message","payload","externalActions","alert","next","action","data","emit","msg","produce","draftState","exampleDerivedData","createSelector","state","example","reducer","combineReducers","exampleReducer","middleware","applyMiddleware","communicator","reduxMiddleware","bind","createStore","composeWithDevTools","selectors","exampleSelectors","selectorNames","Object","assign","values","require","getStateWith","registerSelectors","getState","exampleAction","transmitAction","electron","window","undefined","path","fs","app","appPath","getAppPath","getPath","p","parentFolder","join","parentFolderFileList","readdirSync","mapDispatchToProps","exampleActions","connectComponent","connect","_props","messageWithEmphasis","props","useState","input","setInput","className","exampleProp","placeholder","onChange","event","target","value","variant","color","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"waAOMA,E,WAIJ,WAAYC,GAAuB,yBAHnCA,WAGkC,OAFlCC,YAEkC,EAChCC,QAAQC,IAAI,6BACZC,KAAKJ,MAAQA,EACbI,KAAKH,OAASG,KAAKC,a,8CAGrB,WAAc,IAAD,OAkBX,OAjBAD,KAAKH,OAASK,IAAe,sBAAuB,CAClDC,WAAY,CAAC,eAGfH,KAAKH,OAAOO,GAAG,WAAW,WACxB,EAAKR,MAAMS,SCpBqB,CACpCC,KAAM,wBDsBJN,KAAKH,OAAOO,GAAG,cAAc,WAC3B,EAAKR,MAAMS,SCpBwB,CACvCC,KAAM,2BDsBJN,KAAKH,OAAOO,GAAG,mBAAmB,SAACG,GACjC,EAAKX,MAAMS,SCpBqB,SAACE,GAAD,MAAsB,CAC1DD,KAAM,2BACNE,QAASD,GDkBeE,CAAuCF,IAC3DG,MAAM,sBAAwBH,EAAU,QAGnCP,KAAKH,S,6BAGd,SAAgBc,GAAiB,IAAD,OAC9B,OAAO,SAACC,GACc,aAAhBA,EAAON,OACkB,MAAvBM,EAAOJ,QAAQK,KACjB,EAAKhB,OAAOiB,KAAKF,EAAOJ,QAAQO,IAAKH,EAAOJ,QAAQK,MAEpD,EAAKhB,OAAOiB,KAAKF,EAAOJ,QAAQO,KAElCjB,QAAQC,IAAI,eAAgBa,EAAOJ,UAErCG,EAAKC,Q,aErCII,eAAQ,SAACC,EAA0BL,GAChD,OAAQA,EAAON,MACb,IAAK,iBAIL,IAAK,2BAEH,YADAW,EAAWJ,KAAOD,EAAOJ,YAXI,CACjCK,KAAM,kB,QCLKK,EAAqBC,yBAChC,CAAC,SAACC,GAAD,OAAqBA,EAAMC,QAAQR,QACpC,SAACA,GACC,OAAOA,EAAO,SCIZS,EAAUC,0BAAgB,CAC9BF,QAASG,IAKLC,EAAaC,2BJqCH,SAAC9B,GACf,IAAM+B,EAAe,IAAIhC,EAAaC,GACtC,OAAO+B,EAAaC,gBAAgBC,KAAKF,MIpCrC/B,EAAQkC,sBAAYR,EAASS,8BAAoBN,IAG1CO,EAAY,CACvBX,QAASY,GAILC,EAAgBC,OAAOC,OAAP,MAAAD,OAAM,CAAQ,IAAR,mBAAeA,OAAOE,OAAOL,MACzD,EAA4CM,EAAQ,IAA5CC,EAAR,EAAQA,cAIRC,EAJA,EAAsBA,mBAIJN,GAClBK,GAAa,kBAAM3C,EAAM6C,cAEV7C,QCnCF8C,EAAgB,SAAClC,GAAD,MAAsB,CACjDF,KAAM,iBACNE,QAASA,IAIEmC,EAAiB,SAAC5B,EAAaF,GAAd,MAAiC,CAC7DP,KAAM,WACNE,QAAS,CACPO,IAAKA,EACLF,KAAMA,KCPJ+B,EAAWC,OAAOP,QAAUO,OAAOP,QAAQ,iBAAcQ,EAClDC,EAAOF,OAAOP,QACtBO,OAAOP,QAAQ,aAChBQ,EACSE,EAAKH,OAAOP,QACpBO,OAAOP,QAAQ,WAChBQ,EAEEG,EAAML,EAAWA,EAASK,SAAMH,EAChCI,EAAUD,EAAMA,EAAIE,kBAAeL,EAEbG,GAAMA,EAAIG,QAAQ,Y,IAMjBC,E,OCXvBC,GDWuBD,ECXK,MDYzBN,GAAQG,EAAUH,EAAKQ,KAAKL,EAASG,QAAKP,GCX7CU,EACJR,GAAMM,EAAeN,EAAGS,YAAYH,QAAgBR,EAahDY,EAAqBC,EA6CZC,MA3CUC,aATD,SAACzC,EAAiB0C,GACxC,MAAO,CACLvD,QAASa,EAAMC,QAAQR,KACvBkD,oBAAqB/B,EAAUX,QAAQH,mBAAmBE,MAMZsC,EA2CnCE,EAxCf,SAA0BI,GACxB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEA,OACE,sBAAKC,UAAU,mBAAf,UACE,4BAAIJ,EAAMzD,UACV,mBAAG6D,UAAU,OAAb,SACE,4BAAIJ,EAAMD,wBAEZ,mBAAGK,UAAU,OAAb,SAAqBJ,EAAMK,cAC1Bf,GAAgBE,EACf,mBAAGY,UAAU,OAAb,8BAAmCd,EAAnC,sBAA6DE,EAAqBD,KAChF,SAGF,mBAAGa,UAAU,OAAb,SAEI,iFAIN,gCACE,cAAC,IAAD,CACEA,UAAU,cACVE,YAAY,kBACZC,SAAU,SAACC,GAAD,OAAWL,EAASK,EAAMC,OAAOC,QAC3CA,MAAOR,IAET,cAAC,IAAD,CACES,QAAQ,QACRC,MAAM,UACNC,QAAS,kBAAMb,EAAMtB,cAAcwB,IAHrC,uCC3COY,MATf,WACE,OACE,sBAAKV,UAAU,UAAf,UACE,mBAAGA,UAAU,gBAAb,sBACA,cAAC,EAAD,CAAkBC,YAAY,yDCOrBU,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACnC,8BAAqBC,MACxB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACjCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCWdlF,QAAQC,IAAI,8BAGdyF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAU9F,MAAOA,EAAjB,SACE,cAAC,EAAD,UAIN+F,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.977c7f53.chunk.js","sourcesContent":["import socketIOClient, { Socket } from \"socket.io-client\";\nimport { Dispatch, Middleware, MiddlewareAPI } from \"redux\";\nimport { AppAction } from \"redux/actions/actionTypes\";\nimport * as externalActions from \"redux/actions/externalActions\";\n\n// This is an example of how you might use Socket.IO to communicate with the outside world and exchange data with the app using Redux\n\nclass Communicator {\n  store: MiddlewareAPI;\n  socket: Socket;\n\n  constructor(store: MiddlewareAPI) {\n    console.log(\"Initializing communicator\");\n    this.store = store;\n    this.socket = this.initSocket();\n  }\n\n  initSocket() {\n    this.socket = socketIOClient(\"ws://localhost:8080\", {\n      transports: [\"websocket\"],\n    });\n\n    this.socket.on(\"connect\", () => {\n      this.store.dispatch(externalActions.serverConnected());\n    });\n\n    this.socket.on(\"disconnect\", () => {\n      this.store.dispatch(externalActions.serverDisconnected());\n    });\n\n    this.socket.on(\"EXAMPLE_MESSAGE\", (message: string) => {\n      this.store.dispatch(externalActions.exampleMessageReceived(message));\n      alert('Received message: \"' + message + '\"'); // This is a good place to show alerts\n    });\n\n    return this.socket;\n  }\n\n  reduxMiddleware(next: Dispatch) {\n    return (action: AppAction) => {\n      if (action.type === \"TRANSMIT\") {\n        if (action.payload.data != null) {\n          this.socket.emit(action.payload.msg, action.payload.data);\n        } else {\n          this.socket.emit(action.payload.msg);\n        }\n        console.log(\"Transmitting\", action.payload);\n      }\n      next(action);\n    };\n  }\n}\n\nexport default ((store: MiddlewareAPI) => {\n  const communicator = new Communicator(store);\n  return communicator.reduxMiddleware.bind(communicator);\n}) as Middleware;\n\n/* Example Socket.IO server\nconst io = require('socket.io')(8080, {\n  cors: {\n    origin: '*',\n  }\n});\n\nio.on('connect', socket => socket.emit('EXAMPLE_MESSAGE', \"Hi from the server\"));\n*/\n","// These \"external\" actions are never triggered by the user, they will typically come from communicator.ts\n\n// For example:\nexport const serverConnected = () => ({\n  type: \"SERVER_CONNECTED\" as const,\n});\n\nexport const serverDisconnected = () => ({\n  type: \"SERVER_DISCONNECTED\" as const,\n});\n\nexport const exampleMessageReceived = (message: string) => ({\n  type: \"EXAMPLE_MESSAGE_RECEIVED\" as const,\n  payload: message,\n});\n","import produce from \"immer\";\nimport { AppAction } from \"../actions/actionTypes\";\n\ninterface ExampleState {\n  data: string;\n}\n\nconst initialState: ExampleState = {\n  data: \"Initial value\",\n};\n\nexport default produce((draftState: ExampleState, action: AppAction) => {\n  switch (action.type) {\n    case \"EXAMPLE_ACTION\": {\n      draftState.data = action.payload;\n      return;\n    }\n    case \"EXAMPLE_MESSAGE_RECEIVED\": {\n      draftState.data = action.payload;\n      return;\n    }\n  }\n}, initialState);\n","import { createSelector } from \"reselect\";\nimport { AppState } from \"../store\";\n\nexport const exampleDerivedData = createSelector(\n  [(state: AppState) => state.example.data],\n  (data) => {\n    return data + \"!!!\";\n  }\n);\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\n\nimport communicator from \"communicator\";\n\nimport exampleReducer from \"./reducers/exampleReducer\";\n\nimport * as exampleSelectors from \"./selectors/exampleSelectors\";\n\n// Reducer setup\nconst reducer = combineReducers({\n  example: exampleReducer,\n});\nexport type AppState = ReturnType<typeof reducer>;\n\n// Apply communicator middleware for sending and receiving data over the network or IPC\nconst middleware = applyMiddleware(communicator);\n\n// Create store\nconst store = createStore(reducer, composeWithDevTools(middleware));\n\n// Reselect setup\nexport const selectors = {\n  example: exampleSelectors,\n};\n// Reselect Devtools setup:\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nconst selectorNames = Object.assign({}, ...Object.values(selectors));\nconst { getStateWith, registerSelectors } = require(\"reselect-tools\") as {\n  getStateWith: (getState: () => AppState) => void;\n  registerSelectors: (selectors: typeof selectorNames) => void;\n};\nregisterSelectors(selectorNames); // register string names for selectors\ngetStateWith(() => store.getState()); // allows you to get selector inputs and outputs\n\nexport default store;\n","export const exampleAction = (payload: string) => ({\n  type: \"EXAMPLE_ACTION\" as const,\n  payload: payload,\n});\n\n// \"TRANSMIT\" actions are caught by the communicator middleware to send a message to the outside world\nexport const transmitAction = (msg: string, data: unknown) => ({\n  type: \"TRANSMIT\" as const,\n  payload: {\n    msg: msg,\n    data: data,\n  },\n});\n","import type pathImport from \"path\";\nimport type fsImport from \"fs\";\n\nconst electron = window.require ? window.require(\"electron\") : undefined;\nexport const path = window.require\n  ? (window.require(\"path\") as typeof pathImport)\n  : undefined;\nexport const fs = window.require\n  ? (window.require(\"fs\") as typeof fsImport)\n  : undefined;\n\nconst app = electron ? electron.app : undefined;\nconst appPath = app ? app.getAppPath() : undefined;\n\nexport const userDataPath = app ? app.getPath(\"userData\") : undefined;\n// The userData directory is the appData directory appended with the app name, where appData is:\n//   - %APPDATA% on Windows\n//   - $XDG_CONFIG_HOME or ~/.config on Linux\n//   - ~/Library/Application Support on macOS\n\nexport function relativePath(p: string) {\n  return path && appPath ? path.join(appPath, p) : undefined;\n}\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Input } from \"@vechaiui/react\";\n\nimport { AppState, selectors } from \"redux/store\";\nimport * as exampleActions from \"redux/actions/exampleActions\";\nimport { ExtractPropsType } from \"utils/reduxUtils\";\nimport { fs, relativePath } from \"utils/electronUtils\";\n\nconst parentFolder = relativePath(\"../\");\nconst parentFolderFileList =\n  fs && parentFolder ? fs.readdirSync(parentFolder) : undefined;\n\ninterface OwnProps {\n  exampleProp: string;\n}\n\nconst mapStateToProps = (state: AppState, _props: OwnProps) => {\n  return {\n    message: state.example.data,\n    messageWithEmphasis: selectors.example.exampleDerivedData(state),\n  };\n};\n\nconst mapDispatchToProps = exampleActions;\n\nconst connectComponent = connect(mapStateToProps, mapDispatchToProps);\ntype Props = ExtractPropsType<typeof connectComponent>;\n\nfunction ExampleComponent(props: Props) {\n  const [input, setInput] = useState(\"\");\n\n  return (\n    <div className=\"ExampleComponent\">\n      <p>{props.message}</p>\n      <p className=\"mb-4\">\n        <b>{props.messageWithEmphasis}</b>\n      </p>\n      <p className=\"mb-4\">{props.exampleProp}</p>\n      {parentFolder && parentFolderFileList ? (\n        <p className=\"mb-4\">{`The folder ${parentFolder} contains: ${parentFolderFileList.join(\n          \", \"\n        )}`}</p>\n      ) : (\n        <p className=\"mb-4\">\n          {\n            \"Can't access NodeJS/Electron modules, so this must be running in the browser\"\n          }\n        </p>\n      )}\n      <div>\n        <Input\n          className=\"w-auto mr-2\"\n          placeholder=\"Type something!\"\n          onChange={(event) => setInput(event.target.value)}\n          value={input}\n        ></Input>\n        <Button\n          variant=\"solid\"\n          color=\"primary\"\n          onClick={() => props.exampleAction(input)}\n        >\n          Dispatch Action!\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default connectComponent(ExampleComponent);\n","import React from \"react\";\n\nimport \"./App.css\";\nimport ExampleComponent from \"./ExampleComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App p-6\">\n      <p className=\"text-5xl mb-4\">Welcome!</p>\n      <ExampleComponent exampleProp=\"This string was passed from the parent component\"></ExampleComponent>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    void import(\"web-vitals\").then(\n      ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      }\n    );\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { VechaiProvider } from \"@vechaiui/react\";\n\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport store from \"./redux/store\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// declare Node.js properties of 'window' provided by Electron\ndeclare global {\n  interface Window {\n    require: typeof require;\n    process: typeof process;\n  }\n}\n\nif (process.env.NODE_ENV === \"development\") {\n  console.log(\"Running in development mode\");\n} else {\n  console.log(\"Running in production mode\");\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <VechaiProvider>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </VechaiProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}