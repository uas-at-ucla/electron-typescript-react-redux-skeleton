{"version":3,"sources":["communicator.ts","redux/actions/externalActions.ts","redux/reducers/exampleReducer.ts","redux/selectors/exampleSelectors.ts","redux/store.ts","redux/actions/exampleActions.ts","utils/electronUtils.ts","components/ExampleComponent.tsx","components/App.tsx","index.tsx"],"names":["Communicator","store","socket","console","log","this","initSocket","socketIOClient","on","dispatch","type","data","payload","externalActions","next","action","emit","msg","produce","draftState","toString","exampleDerivedData","createSelector","state","example","reducer","combineReducers","exampleReducer","middleware","applyMiddleware","communicator","reduxMiddleware","createStore","composeWithDevTools","selectors","exampleSelectors","selectorNames","Object","assign","values","require","getStateWith","registerSelectors","getState","exampleAction","transmitAction","electron","window","undefined","path","fs","app","remote","appPath","getAppPath","getPath","p","parentFolder","join","parentFolderFileList","readdirSync","mapDispatchToProps","exampleActions","connectComponent","connect","_props","message","messageWithEmphasis","props","useState","input","setInput","className","exampleProp","Input","onChange","event","target","value","Button","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.76dd0879.chunk.js","sourcesContent":["import socketIOClient, { Socket } from \"socket.io-client\";\nimport { Dispatch, Middleware, MiddlewareAPI } from \"redux\";\nimport { AppAction } from \"redux/actions/actionTypes\";\nimport * as externalActions from \"redux/actions/externalActions\";\n\n// This is an example of how you might use Socket.IO to communicate with outside world and exchange data with the app using Redux\n\nclass Communicator {\n  store: MiddlewareAPI;\n  socket: Socket;\n\n  constructor(store: MiddlewareAPI) {\n    console.log(\"Initializing communicator\");\n    this.store = store;\n    this.socket = this.initSocket();\n  }\n\n  initSocket(): Socket {\n    this.socket = socketIOClient(\"http://localhost:8080\");\n\n    this.socket.on(\"connect\", () => {\n      this.store.dispatch(externalActions.serverConnected());\n    });\n\n    this.socket.on(\"disconnect\", () => {\n      this.store.dispatch(externalActions.serverDisconnected());\n    });\n\n    this.socket.on(\"EXAMPLE_MSG\", (data: number) => {\n      this.store.dispatch(externalActions.exampleMessageReceived(data));\n      // alert(\"Message Received!\"); // This is also a good place to show alerts\n    });\n\n    return this.socket;\n  }\n\n  reduxMiddleware(next: Dispatch) {\n    return (action: AppAction) => {\n      if (action.type === \"TRANSMIT\") {\n        if (action.payload.data != null) {\n          this.socket.emit(action.payload.msg, action.payload.data);\n        } else {\n          this.socket.emit(action.payload.msg);\n        }\n        console.log(\"Transmitting\", action.payload);\n      }\n      next(action);\n    };\n  }\n}\n\nexport default ((store: MiddlewareAPI) => {\n  const communicator = new Communicator(store);\n  return (next: Dispatch) => communicator.reduxMiddleware(next);\n}) as Middleware;\n","// These \"external\" actions are never triggered by the user, they will typically come from communicator.ts\n\n// For example:\nexport const serverConnected = () => ({\n  type: \"SERVER_CONNECTED\" as const,\n});\n\nexport const serverDisconnected = () => ({\n  type: \"SERVER_DISCONNECTED\" as const,\n});\n\nexport const exampleMessageReceived = (data: number) => ({\n  type: \"EXAMPLE_MESSAGE_RECEIVED\" as const,\n  payload: data,\n});\n","import produce from \"immer\";\nimport { AppAction } from \"../actions/actionTypes\";\n\ninterface ExampleState {\n  data: string;\n}\n\nconst initialState: ExampleState = {\n  data: \"Initial value\",\n};\n\nexport default produce((draftState: ExampleState, action: AppAction) => {\n  switch (action.type) {\n    case \"EXAMPLE_ACTION\": {\n      draftState.data = action.payload;\n      return;\n    }\n    case \"EXAMPLE_MESSAGE_RECEIVED\": {\n      draftState.data = action.payload.toString();\n    }\n  }\n}, initialState);\n","import { createSelector } from \"reselect\";\nimport { AppState } from \"../store\";\n\nexport const exampleDerivedData = createSelector(\n  [(state: AppState) => state.example.data],\n  (data) => {\n    return data + \"!!!\";\n  }\n);\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\n\nimport communicator from \"communicator\";\n\nimport exampleReducer from \"./reducers/exampleReducer\";\n\nimport * as exampleSelectors from \"./selectors/exampleSelectors\";\n\n// Reducer setup\nconst reducer = combineReducers({\n  example: exampleReducer,\n});\nexport type AppState = ReturnType<typeof reducer>;\n\n// Apply communicator middleware for sending and receiving data from server\nconst middleware = applyMiddleware(communicator);\n\n// Create store\nconst store = createStore(reducer, composeWithDevTools(middleware));\n\n// Reselect setup\nexport const selectors = {\n  example: exampleSelectors,\n};\n// Reselect Devtools setup:\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nconst selectorNames = Object.assign({}, ...Object.values(selectors));\nconst { getStateWith, registerSelectors } = require(\"reselect-tools\") as {\n  getStateWith: (getState: () => AppState) => void;\n  registerSelectors: (selectors: typeof selectorNames) => void;\n};\nregisterSelectors(selectorNames); // register string names for selectors\ngetStateWith(() => store.getState()); // allows you to get selector inputs and outputs\n\nexport default store;\n","export const exampleAction = (payload: string) => ({\n  type: \"EXAMPLE_ACTION\" as const,\n  payload: payload,\n});\n\n// \"TRANSMIT\" actions are caught by the communicator middleware to send a message to the outside world\nexport const transmitAction = (msg: string, data: unknown) => ({\n  type: \"TRANSMIT\" as const,\n  payload: {\n    msg: msg,\n    data: data,\n  },\n});\n","import pathImport from \"path\";\nimport fsImport from \"fs\";\n\nconst electron = window.require ? window.require(\"electron\") : undefined;\nexport const path = window.require\n  ? (window.require(\"path\") as typeof pathImport)\n  : undefined;\nexport const fs = window.require\n  ? (window.require(\"fs\") as typeof fsImport)\n  : undefined;\n\nconst app = electron ? electron.remote.app : undefined;\nconst appPath = app ? app.getAppPath() : undefined;\n\nexport const userDataPath = app ? app.getPath(\"userData\") : undefined;\n// The userData directory is the appData directory appended with the app name, where appData is:\n//   - %APPDATA% on Windows\n//   - $XDG_CONFIG_HOME or ~/.config on Linux\n//   - ~/Library/Application Support on macOS\n\nexport function relativePath(p: string) {\n  return path && appPath ? path.join(appPath, p) : undefined;\n}\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Input } from \"reactstrap\";\n\nimport { AppState, selectors } from \"redux/store\";\nimport * as exampleActions from \"redux/actions/exampleActions\";\nimport { ExtractPropsType } from \"utils/reduxUtils\";\nimport { fs, relativePath } from \"utils/electronUtils\";\n\nconst parentFolder = relativePath(\"../\");\nconst parentFolderFileList =\n  fs && parentFolder ? fs.readdirSync(parentFolder) : undefined;\n\ninterface OwnProps {\n  exampleProp: string;\n}\n\nconst mapStateToProps = (state: AppState, _props: OwnProps) => {\n  return {\n    message: state.example.data,\n    messageWithEmphasis: selectors.example.exampleDerivedData(state),\n  };\n};\n\nconst mapDispatchToProps = exampleActions;\n\nconst connectComponent = connect(mapStateToProps, mapDispatchToProps);\ntype Props = ExtractPropsType<typeof connectComponent>;\n\nconst ExampleComponent = (props: Props) => {\n  const [input, setInput] = useState(\"\");\n\n  return (\n    <div className=\"ExampleComponent\">\n      <h1>{props.message}</h1>\n      <h1>\n        <b>{props.messageWithEmphasis}</b>\n      </h1>\n      <p>{props.exampleProp}</p>\n      {parentFolder && parentFolderFileList ? (\n        <p>{`The folder ${parentFolder} contains: ${parentFolderFileList.join(\n          \", \"\n        )}`}</p>\n      ) : (\n        <p>\n          {\n            \"Can't access NodeJS/Electron modules, so this must be running in the browser\"\n          }\n        </p>\n      )}\n      <div>\n        <Input\n          onChange={(event) => setInput(event.target.value)}\n          value={input}\n        ></Input>\n        <Button onClick={() => props.exampleAction(input)}>\n          Dispatch Action!\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default connectComponent(ExampleComponent);\n","import React from \"react\";\n\nimport \"./App.css\";\nimport ExampleComponent from \"./ExampleComponent\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Welcome!</h1>\n      <ExampleComponent exampleProp=\"This string was passed from the parent component\"></ExampleComponent>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"sanitize.css\";\n\nimport App from \"./components/App\";\nimport \"./index.css\";\nimport store from \"./redux/store\";\n\n// declare Node.js properties of 'window' provided by Electron\ndeclare global {\n  interface Window {\n    require: typeof require;\n    process: typeof process;\n  }\n}\n\nif (process.env.NODE_ENV === \"development\") {\n  console.log(\"Running in development mode\");\n} else {\n  console.log(\"Running in production mode\");\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}