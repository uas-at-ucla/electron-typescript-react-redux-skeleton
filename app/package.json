{
  "name": "App",
  "version": "0.0.0",
  "main": "electron/electron.js",
  "scripts": {
    "react-start": "vite",
    "electron-start": "npm run electron-build && cross-env ELECTRON_IS_DEV=1 electron .",
    "start": "concurrently \"npm run react-start\" \"wait-on -c wait-on.config.js http-get://localhost:3000/ && npm run electron-start\"",
    "start-web": "vite --port 3001",
    "start-prod": "cross-env ELECTRON_IS_DEV=0 electron .",
    "react-build": "vite build",
    "electron-build": "tsc --project tsconfig.electron.json",
    "build": "npm run electron-build && npm run react-build",
    "lint": "eslint ./src ./electron --ext .ts,.tsx",
    "package": "npm run build && electron-packager . --overwrite --asar --out=release-builds --ignore=\"^\\/(?!(?:dist(?:\\/|$)|electron(?:\\/|$)|node_modules(?:\\/|$)|package\\.json$))\" --arch=x64",
    "package-mac": "npm run package -- --platform=darwin",
    "package-win": "npm run package -- --platform=win32",
    "package-linux": "npm run package -- --platform=linux"
  },
  "//scriptsComments": {
    "react-start": "Start the React app in development mode, which will auto-reload the app when files are changed.",
    "electron-start": "Start electron in development mode, i.e. use the React app running on http://localhost:3000",
    "start": "Concurrently run react-start and electron-start",
    "start-web": "Start the React app in development mode on port 3001 and automatically open in your web Browser. Electron-dependent features will be missing in the browser.",
    "start-prod": "Given that `npm run build` has been run, run the app in production mode, i.e. run electron and use build/index.html as the entry point",
    "react-build": "Compile the React app into the build folder",
    "electron-build": "Compile the electron/electron.ts TypeScript file into JavaScript",
    "build": "Build the React app and the electron script",
    "lint": "Check for code errors/warnings. These should automatically show in the VS Code editor, so you usually don't need to run this command.",
    "package": "Create standalone executable for your computer's platform. The --ignore option ensures that only the needed files are included.",
    "package-<platform>": "Create standalone executable for a specific platform. Platform-specific command line options for electron-packager can be set."
  },
  "dependencies": {
    "electron-context-menu": "^3.1.1",
    "electron-is-dev": "^2.0.0"
  },
  "//dependenciesComments": {
    "electron-context-menu": "Add a right-click menu to Electron, including Inspect Element in development mode",
    "electron-is-dev": "Detect if electron is running in development mode"
  },
  "devDependencies": {
    "@tailwindcss/forms": "^0.3.3",
    "@types/color-string": "^1.5.0",
    "@types/react": "^17.0.20",
    "@types/react-dom": "^17.0.9",
    "@typescript-eslint/eslint-plugin": "^4.31.0",
    "@typescript-eslint/parser": "^4.31.0",
    "@vechaiui/core": "^0.5.0",
    "@vechaiui/react": "^0.1.12",
    "@vitejs/plugin-react-refresh": "^1.3.6",
    "autoprefixer": "^10.3.4",
    "babel-eslint": "^10.1.0",
    "check-dependencies": "^1.1.0",
    "concurrently": "^6.2.1",
    "cross-env": "^7.0.3",
    "electron": "^15.5.5",
    "electron-devtools-installer": "^3.2.0",
    "electron-packager": "^15.4.0",
    "eslint": "^7.32.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-config-react-app": "^6.0.0",
    "eslint-plugin-flowtype": "^5.9.2",
    "eslint-plugin-import": "^2.24.2",
    "eslint-plugin-jsx-a11y": "^6.4.1",
    "eslint-plugin-no-autofix": "^1.1.2",
    "eslint-plugin-prettier": "^4.0.0",
    "eslint-plugin-react": "^7.25.1",
    "eslint-plugin-react-hooks": "^4.2.0",
    "immer": "^9.0.6",
    "postcss": "^8.3.6",
    "prettier": "^2.4.0",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-redux": "^7.2.5",
    "redux": "^4.1.1",
    "redux-devtools-extension": "^2.13.9",
    "reselect": "^4.0.0",
    "reselect-tools": "^0.0.7",
    "socket.io-client": "^4.2.0",
    "tailwindcss": "^2.2.15",
    "typescript": "^4.4.3",
    "vite": "^2.5.6",
    "vite-plugin-checker": "^0.3.4",
    "vite-plugin-html": "^2.1.0",
    "vite-tsconfig-paths": "^3.3.14",
    "wait-on": "^6.0.0"
  },
  "//devDependenciesComments": {
    "NOTE": "devDependencies aren't included in node_modules in the packaged app. Development tools and dependencies for the React app should go here, since those dependencies get compiled into the React build.",
    "@tailwindcss/forms": "Official Tailwind CSS plugin needed by VechaiUI",
    "@types/<>": "TypeScript type definitions for various packages",
    "@typescript-eslint/eslint-plugin": "TypeScript linting support for ESLint",
    "@typescript-eslint/parser": "TypeScript parsing support for ESLint (the parser converts the code into a data structure that the linter can understand)",
    "@vechaiui/<>": "VechaiUI - Plug-n-play component library built on top of Tailwind CSS",
    "@vitejs/plugin-react-refresh": "Plugin for the Vite build tool providing Fast Refresh for React",
    "autoprefixer": "The most ubiquitous PostCSS plugin, and needed by Tailwind CSS",
    "babel-eslint": "Needed by eslint-config-react-app",
    "check-dependencies": "Check if all the dependencies are installed according to this file - much faster than just running `npm install`",
    "concurrently": "Run two commands concurrently in the same terminal",
    "cross-env": "Allows setting environment variables for both Unix and Windows",
    "electron": "PRIMARY LIBRARY. Chromium, but modified to provide access to Node.js from a web frontend and enable building cross-platform desktop apps",
    "electron-devtools-installer": "Install Chrome extensions in Electron",
    "electron-packager": "Package the app into an executable for any platform",
    "eslint": "Linting for JavaScript",
    "eslint-config-prettier": "Turns off ESLint rules that would conflict with Prettier.",
    "eslint-config-react-app": "React ESLint rules as seen in create-react-app",
    "eslint-plugin-flowtype": "Needed by eslint-config-react-app",
    "eslint-plugin-import": "Needed by eslint-config-react-app",
    "eslint-plugin-jsx-a11y": "Needed by eslint-config-react-app",
    "eslint-plugin-no-autofix": "Include ESLint rules that you want to be flagged but not auto-fixed (useful for prefer-const)",
    "eslint-plugin-prettier": "ESLint plugin that runs Prettier as an ESLint rule",
    "eslint-plugin-react": "Needed by eslint-config-react-app",
    "eslint-plugin-react-hooks": "Needed by eslint-config-react-app",
    "immer": "Make it easy to generate the next state in Redux reducers",
    "postcss": "Allows writing more powerful CSS by transforming your CSS files based on plugins you install",
    "prettier": "Code formatter to make code look pretty",
    "react": "PRIMARY LIBRARY. UI framework",
    "react-dom": "Part of the React framework",
    "react-redux": "Connect React and Redux",
    "redux": "PRIMARY LIBRARY. State management library - manages how all the data in the app is updated and used",
    "redux-devtools-extension": "Helps setup the Redux Devtools Chrome extension",
    "reselect": "Compute derived data from the state using memoization",
    "reselect-tools": "Helps setup the Reselect Devtools Chrome extension",
    "socket.io-client": "Exchange messages with a Socket.IO server",
    "tailwindcss": "Provides lots of CSS classes to make it easier to style HTML using the class attribute, along with other powerful styling tools",
    "typescript": "PRIMARY LIBRARY. Typed superset of JavaScript. With editor support, catches errors and adds clarity to JavaScript. Provides the `tsc` command for compiling.",
    "vite": "Build tool used to initialize the app folder",
    "vite-plugin-checker": "Perform type checking and ESLint linting when building and running Vite",
    "vite-plugin-html": "Support EJS in index.html",
    "vite-tsconfig-paths": "Give Vite the ability to resolve imports using TypeScript's path mapping",
    "wait-on": "Wait for a URL to be up. Used to wait for the React app to be ready before starting Electron in `npm start`"
  }
}
